colspn  [Last registered both single and two neighbours on tos network]
{
colorsets:
  Unit = {0..29};

variables:
  Unit : u;
  Unit : n1;
  Unit : n2;

colorfunctions:
bool  is_neighbour(Unit u,Unit n1) { (u=0 & (n1=1|n1=2|n1=28|n1=29)) | (u=1 & (n1=0|n1=2|n1=3|n1=29)) | (u=2 & (n1=0|n1=1|n1=3|n1=4|n1=20|n1=25)) | (u=3 & (n1=1|n1=2|n1=4|n1=6)) | (u=4 & (n1=2|n1=3|n1=5|n1=6)) | (u=5 & (n1=4|n1=6|n1=7|n1=10)) | (u=6 & (n1=3|n1=4|n1=5|n1=7|n1=8|n1=23)) | (u=7 & (n1=5|n1=6|n1=8|n1=9)) | (u=8 & (n1=6|n1=7|n1=10|n1=17)) | (u=9 & (n1=7|n1=10|n1=11)) | (u=10 & (n1=5|n1=8|n1=9|n1=12)) | (u=11 & (n1=9|n1=12|n1=13|n1=21)) | (u=12 & (n1=10|n1=11|n1=13|n1=14)) | (u=13 & (n1=11|n1=12|n1=14|n1=15|n1=18)) | (u=14 & (n1=12|n1=13|n1=15|n1=16)) | (u=15 & (n1=13|n1=14|n1=16|n1=17)) | (u=16 & (n1=14|n1=15|n1=17|n1=18)) | (u=17 & (n1=8|n1=15|n1=16|n1=18|n1=19)) | (u=18 & (n1=13|n1=16|n1=17|n1=19|n1=20)) | (u=19 & (n1=17|n1=18|n1=21)) | (u=20 & (n1=2|n1=18|n1=21)) | (u=21 & (n1=11|n1=19|n1=20|n1=22)) | (u=22 & (n1=21|n1=23|n1=24)) | (u=23 & (n1=6|n1=22|n1=25)) | (u=24 & (n1=22|n1=25|n1=26)) | (u=25 & (n1=2|n1=23|n1=24|n1=27)) | (u=26 & (n1=24|n1=27|n1=28)) | (u=27 & (n1=25|n1=26|n1=28|n1=29)) | (u=28 & (n1=0|n1=26|n1=27|n1=29)) | (u=29 & (n1=0|n1=1|n1=27|n1=28)) };
bool  are_both_neighbours(Unit u,Unit n1,Unit n2) { (n1!=n2) & ((u=0 & (n1=1|n1=2|n1=28|n1=29) & (n2=1|n2=2|n2=28|n2=29)) | (u=1 & (n1=0|n1=2|n1=3|n1=29) & (n2=0|n2=2|n2=3|n2=29)) | (u=2 & (n1=0|n1=1|n1=3|n1=4|n1=20|n1=25) & (n2=0|n2=1|n2=3|n2=4|n2=20|n2=25)) | (u=3 & (n1=1|n1=2|n1=4|n1=6) & (n2=1|n2=2|n2=4|n2=6)) | (u=4 & (n1=2|n1=3|n1=5|n1=6) & (n2=2|n2=3|n2=5|n2=6)) | (u=5 & (n1=4|n1=6|n1=7|n1=10) & (n2=4|n2=6|n2=7|n2=10)) | (u=6 & (n1=3|n1=4|n1=5|n1=7|n1=8|n1=23) & (n2=3|n2=4|n2=5|n2=7|n2=8|n2=23)) | (u=7 & (n1=5|n1=6|n1=8|n1=9) & (n2=5|n2=6|n2=8|n2=9)) | (u=8 & (n1=6|n1=7|n1=10|n1=17) & (n2=6|n2=7|n2=10|n2=17)) | (u=9 & (n1=7|n1=10|n1=11) & (n2=7|n2=10|n2=11)) | (u=10 & (n1=5|n1=8|n1=9|n1=12) & (n2=5|n2=8|n2=9|n2=12)) | (u=11 & (n1=9|n1=12|n1=13|n1=21) & (n2=9|n2=12|n2=13|n2=21)) | (u=12 & (n1=10|n1=11|n1=13|n1=14) & (n2=10|n2=11|n2=13|n2=14)) | (u=13 & (n1=11|n1=12|n1=14|n1=15|n1=18) & (n2=11|n2=12|n2=14|n2=15|n2=18)) | (u=14 & (n1=12|n1=13|n1=15|n1=16) & (n2=12|n2=13|n2=15|n2=16)) | (u=15 & (n1=13|n1=14|n1=16|n1=17) & (n2=13|n2=14|n2=16|n2=17)) | (u=16 & (n1=14|n1=15|n1=17|n1=18) & (n2=14|n2=15|n2=17|n2=18)) | (u=17 & (n1=8|n1=15|n1=16|n1=18|n1=19) & (n2=8|n2=15|n2=16|n2=18|n2=19)) | (u=18 & (n1=13|n1=16|n1=17|n1=19|n1=20) & (n2=13|n2=16|n2=17|n2=19|n2=20)) | (u=19 & (n1=17|n1=18|n1=21) & (n2=17|n2=18|n2=21)) | (u=20 & (n1=2|n1=18|n1=21) & (n2=2|n2=18|n2=21)) | (u=21 & (n1=11|n1=19|n1=20|n1=22) & (n2=11|n2=19|n2=20|n2=22)) | (u=22 & (n1=21|n1=23|n1=24) & (n2=21|n2=23|n2=24)) | (u=23 & (n1=6|n1=22|n1=25) & (n2=6|n2=22|n2=25)) | (u=24 & (n1=22|n1=25|n1=26) & (n2=22|n2=25|n2=26)) | (u=25 & (n1=2|n1=23|n1=24|n1=27) & (n2=2|n2=23|n2=24|n2=27)) | (u=26 & (n1=24|n1=27|n1=28) & (n2=24|n2=27|n2=28)) | (u=27 & (n1=25|n1=26|n1=28|n1=29) & (n2=25|n2=26|n2=28|n2=29)) | (u=28 & (n1=0|n1=26|n1=27|n1=29) & (n2=0|n2=26|n2=27|n2=29)) | (u=29 & (n1=0|n1=1|n1=27|n1=28) & (n2=0|n2=1|n2=27|n2=28))) };

places:
discrete:
  Unit a = 1`all;
  Unit b = 0`0;
  Unit c = 0`0;
  Unit C = 0`0;

transitions:
  f1ab
 {[is_neighbour(u, n1)]}
    : [b >= {n1}]
    : [b + {u}] & [a - {u}]
    : 1
    ;
  f2bc
 {[are_both_neighbours(u, n1, n2)]}
    : [c >= {n1++n2}]
    : [c + {u}] & [b - {u}]
    : 1
    ;
  f2bC
 {[are_both_neighbours(u, n1, n2)]}
    : [C >= {n1++n2}]
    : [C + {u}] & [b - {u}]
    : 1
    ;
  f2cC
 {[are_both_neighbours(u, n1, n2)]}
    : [C >= {n1++n2}]
    : [C + {u}] & [c - {u}]
    : 1
    ;
  f2Cc
 {[are_both_neighbours(u, n1, n2)]}
    : [c >= {n1++n2}]
    : [c + {u}] & [C - {u}]
    : 1
    ;
  f1bc
 {[is_neighbour(u, n1)]}
    : [c >= {n1}]
    : [c + {u}] & [b - {u}]
    : 0.5
    ;
  f1bC
 {[is_neighbour(u, n1)]}
    : [C >= {n1}]
    : [C + {u}] & [b - {u}]
    : 0.5
    ;
  f1cC
 {[is_neighbour(u, n1)]}
    : [C >= {n1}]
    : [C + {u}] & [c - {u}]
    : 0.5
    ;
  f1Cc
 {[is_neighbour(u, n1)]}
    : [c >= {n1}]
    : [c + {u}] & [C - {u}]
    : 0.5
    ;
deterministic:
  extab
    :
    : [b + {0++15}] & [a - {0++15}]
    : 1.0
    ;
  extbC
    :
    : [C + {15++16}] & [b - {15++16}]
    : 2.0
    ;
  extbc
    :
    : [c + {0++29}] & [b - {0++29}]
    : 2.0
    ;

}
