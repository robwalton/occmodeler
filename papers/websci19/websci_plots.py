
import os
from pathlib import Path
import pandas as pd

import plotly.offline as py
import plotly.graph_objs as go

import pyspike
from pyspike import tidydata
import pyspike.util

from pyspike.util import render_name


from websci19.tests.test_websci_models import POLE1_NODES, POLE2_NODES


"""
Run 160 was generated by test_1_and_2_neighbours_with_100_runs above with convergence from noise and
    follow1(a, A),
    follow1(A, a),
    follow2(a, A, 2),
    follow2(A, a, 2),
"""
RUN_160_PATH = '/Users/walton/Documents/DPhil/proof-of-concept/runs/160'


"""
run 161 was generated by skip_test_1_and_2_neighbour_for_stable_initial_markings_100_runs starting from stable structures
            follow1(a, A, 0.2),
            follow1(A, a, 0.2),
            follow2(a, A, 2),
            follow2(A, a, 2),
"""
RUN_161_PATH = '/Users/walton/Documents/DPhil/proof-of-concept/runs/161'


"""
run 162 was generated from test_wtf_162() starting from stable structures. withon only 10 steps as state is unchanging
            # follow1(a, A, 0.2),
            # follow1(A, a, 0.2),
            follow2(a, A, 2),
            follow2(A, a, 2),
"""
RUN_162_PATH = '/Users/walton/Documents/DPhil/proof-of-concept/runs/162'


# %% Plot run 160 data

RUN_DIR = RUN_161_PATH
n_runs = 100

# Load time column
places_path = os.path.join(RUN_DIR, "places.csv")
places = tidydata.read_csv(str(places_path), 'place', drop_non_coloured_sums=False)
time_list = places['time'].unique()




# with columns time, run1
state_name_list = sorted(places['name'].unique())
_, color_dict = pyspike.util.generate_state_order_and_colours(state_name_list)


data = []
for run_num in range(n_runs):
    places_path = os.path.join(RUN_DIR, f"places_{run_num:04d}.csv")
    assert os.path.isfile(places_path)
    places = tidydata.read_csv(str(places_path), 'place', drop_non_coloured_sums=False)
    places_a = places.query("name=='a'")
    pole1_places_a = places_a[places_a['num'].isin(POLE1_NODES)]
    pole2_places_a = places_a[places_a['num'].isin(POLE2_NODES)]

    pole1_a_count = pole1_places_a.groupby(['time'])['count'].agg('sum')
    pole2_a_count = pole2_places_a.groupby(['time'])['count'].agg('sum')

    places_A = places.query("name=='A'")
    pole1_places_A = places_A[places_A['num'].isin(POLE1_NODES)]
    pole2_places_A = places_A[places_A['num'].isin(POLE2_NODES)]

    pole1_A_count = pole1_places_A.groupby(['time'])['count'].agg('sum')
    pole2_A_count = pole2_places_A.groupby(['time'])['count'].agg('sum')

    data.append(
        go.Scatter(
            name=render_name(f"pole 1 run {run_num}"),
            opacity=0.1,
            x=time_list,
            y=pole1_a_count,
            line=dict(color=color_dict['a'])
        )
    )
    # data.append(
    #     go.Scatter(
    #         name=render_name(f"pole 2 run {run_num}"),
    #         x=time_list,
    #         y=pole2_a_count,
    #         line=dict(color=color)
    #     )
    # )

    # data.append(
    #     go.Scatter(
    #         # name=render_name(f"pole 2 run {run_num}"),
    #         opacity=0.1,
    #         x=pole1_a_count,
    #         y=pole2_a_count,
    #         line=dict(color=color_dict['a'])
    #     )
    # )
    # data.append(
    #     go.Scatter(
    #         # name=render_name(f"pole 2 run {run_num}"),
    #         opacity=0.1,
    #         x=pole1_A_count,
    #         y=pole2_A_count,
    #         line=dict(color=color_dict['A'])
    #     )
    # )


title = f"blah"

layout = go.Layout(
    title=title,
    yaxis=dict(title='count'),
    xaxis=dict(title='time')
)

fig = go.Figure(data=data, layout=layout)
url = py.plot(fig)